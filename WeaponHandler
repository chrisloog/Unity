-- This script controls projectiles on the server side

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")


local launchProjectile = ReplicatedStorage:WaitForChild("LaunchProjectile")
local destroyProjectile = ReplicatedStorage:WaitForChild("DestroyProjectile")
local destroyEnemy = ReplicatedStorage:WaitForChild("DestroyEnemy")
local pingChecker = ReplicatedStorage:WaitForChild("Ping")

-- Link to the projectile in ReplicatedStorage
local projectileTemplate = ReplicatedStorage.Projectile

local currentPing = {}

launchProjectile.OnServerInvoke = function(player, position, velocity)
	local projectile = projectileTemplate:Clone()
	projectile.Velocity = velocity

	local ping = 0
	if currentPing[player] then
		ping = currentPing[player]
	end
	local offset = ping * velocity * 1.5
	projectile.Position = position + offset
	local mass = projectile:GetMass()
	projectile.VectorForce.Force = Vector3.new(0, 1, 0) * mass * game.Workspace.Gravity
	projectile.Parent = game.Workspace
	projectile:SetNetworkOwner(nil)
	return projectile
end

local function onDestroyProjectile(player, projectile)
	projectile:Destroy()
end

local function onDestroyEnemy(player, enemy)
	enemy:Destroy()
	-- Adding points for destroying enemies to the enemyStat leaderboard
	local enemyStat = player.leaderstats:WaitForChild("Score")
	enemyStat.Value = enemyStat.Value + 1
end

-- Checking the player's ping
local function onPlayerAdded(player)
	while player and wait(3) do
		local start = tick()
		pingChecker:InvokeClient(player)
		local ping = tick() - start
		currentPing[player] = ping
	end
end

-- The function removes the player from the ping check table
local function onPlayerRemoving(player)
	currentPing[player] = nil
end

-- Linking events and functions
destroyProjectile.OnServerEvent:Connect(onDestroyProjectile)
destroyEnemy.OnServerEvent:Connect(onDestroyEnemy)
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)
